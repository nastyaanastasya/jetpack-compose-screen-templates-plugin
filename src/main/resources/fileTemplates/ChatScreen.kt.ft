package $PACKAGE_NAME

import android.annotation.SuppressLint
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.slideInVertically
import androidx.compose.animation.slideOutVertically
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.systemBarsPadding
import androidx.compose.foundation.layout.wrapContentWidth
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyListState
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.Icon
import androidx.compose.material.IconButton
#if(${USE_OUTLINED_TEXT_FIELD} == true)
import androidx.compose.material.OutlinedTextField
#else
import androidx.compose.material.TextField
#end
import androidx.compose.material.Scaffold
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.material.TopAppBar
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.KeyboardArrowUp
#if(${USE_TOP_APP_BAR_OPTIONS_MENU_ICON} == true)
import androidx.compose.material.icons.filled.MoreVert
#end
#if(${USE_TOP_APP_BAR_SEARCH_ICON} == true)
import androidx.compose.material.icons.filled.Search
#end
import androidx.compose.material.icons.filled.Send
import androidx.compose.material.rememberScaffoldState
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalSoftwareKeyboardController
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import java.text.SimpleDateFormat
import java.util.*

@OptIn(ExperimentalComposeUiApi::class)
@Composable
fun ChatScreen(

) {
    val scaffoldState = rememberScaffoldState()
    val lazyColumnState = rememberLazyListState()

    Scaffold(
        modifier = Modifier.systemBarsPadding(),
        scaffoldState = scaffoldState,
        topBar = { ChatTopAppBar() },
        bottomBar = { MessageTextField() }
    ) { paddingValues ->
        Box(modifier = Modifier.padding(paddingValues)) {
            ChatBody(lazyColumnState)
        }
    }
}

@Composable
private fun ChatBody(
    lazyColumnState: LazyListState
) {
    Column(modifier = Modifier.fillMaxSize()) {
        MessagesContent(lazyColumnState)
    }
}

@SuppressLint("UnrememberedMutableState")
@Composable
fun MessagesContent(
    lazyColumnState: LazyListState
) {
    // have messages
    MessageListContent(lazyColumnState = lazyColumnState)

    // no messages
//    EmptyChatContent(text = "No messages")
}

@Composable
private fun MessageListContent(
    lazyColumnState: LazyListState
) {

    LazyColumn(
        state = lazyColumnState,
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Bottom
    ) {
        items(
            // todo: set items
            items = listOf<Any>(),
            key = { /*TODO*/ }
        ) { message ->

        }
    }
}

@Composable
fun MessageContent(
    messageText: String,
    senderName: String,
    sendTime: Date,
    isLocal: Boolean
) {

    val alignment = if (isLocal) Alignment.End else Alignment.Start
    val arrangement = if (isLocal) Arrangement.End else Arrangement.Start

    val formatter = remember { SimpleDateFormat("yyyy.MM.dd '-' HH:mm a", Locale.ENGLISH) }
    val formattedSendTime = remember(sendTime) { formatter.format(sendTime) }
    val showActions = remember { mutableStateOf(false) }

    Column(
        modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = alignment
    ) {
        Row(
            modifier = Modifier
                .padding(horizontal = 16.dp, vertical = 8.dp)
                .align(alignment),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = arrangement,
        ) {
            Column(verticalArrangement = Arrangement.Top) {

                // sender name
                if (!isLocal) {
                    Text(
                        text = senderName,
                        style = MaterialTheme.typography.labelMedium,
                        color = MaterialTheme.colorScheme.onSurface,
                        modifier = Modifier
                            .align(alignment)
                            .padding(bottom = 4.dp)
                    )
                }

                // messages
                Surface(
                    modifier = Modifier
                        .align(alignment)
                        .clickable {
                            showActions.value = true
                        },
                    shape = RoundedCornerShape(size = 8.dp),
                    color = MaterialTheme.colorScheme.primaryContainer,
                ) {
                    Text(
                        text = messageText,
                        style = MaterialTheme.typography.bodyLarge,
                        color = MaterialTheme.colorScheme.onPrimaryContainer,
                        modifier = Modifier.padding(
                            horizontal = 8.dp,
                            vertical = 4.dp
                        )
                    )
                }

                // message actions
                AnimatedVisibility(
                    visible = showActions.value,
                    modifier = Modifier.align(alignment),
                    enter = slideInVertically(),
                    exit = slideOutVertically()
                ) {
                    Row(modifier = Modifier.wrapContentWidth()) {

                        // add actions
                        IconButton(onClick = {
                            showActions.value = false
                        }) {
                            Icon(
                                imageVector = Icons.Default.KeyboardArrowUp,
                                contentDescription = null
                            )
                        }
                    }
                }

                //  send time
                Text(
                    text = formattedSendTime,
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurface,
                    modifier = Modifier
                        .align(alignment)
                        .padding(top = 4.dp)
                )
            }
        }
    }
}

@Composable
private fun EmptyChatContent(
    text: String
) {
    Column(
        verticalArrangement = Arrangement.Center,
        modifier = Modifier.fillMaxSize()
    ) {
        Text(
            text = text,
            modifier = Modifier.fillMaxWidth(),
            color = MaterialTheme.colorScheme.onSurface,
            style = MaterialTheme.typography.bodyLarge,
            textAlign = TextAlign.Center,
        )
    }
}

@ExperimentalComposeUiApi
@Composable
fun MessageTextField(

) {
    val keyboardController = LocalSoftwareKeyboardController.current
    val textState = remember { mutableStateOf(TextFieldValue()) }

    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(
                start = 16.dp,
                bottom = 16.dp,
                top = 8.dp,
                end = 8.dp
            ),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.Center
    ) {
        #if(${USE_OUTLINED_TEXT_FIELD} == true)
        OutlinedTextField(
        #else
        TextField(
        #end
            value = textState.value,
            onValueChange = { textState.value = it },
            placeholder = {
                Text(
                    text = "Message",
                    style = MaterialTheme.typography.bodyLarge,
                    color = MaterialTheme.colorScheme.onSurface
                )
            },
            keyboardOptions = KeyboardOptions(
                keyboardType = KeyboardType.Text,
                imeAction = ImeAction.Done
            ),
            keyboardActions = KeyboardActions(
                onDone = { keyboardController?.hide() },
            ),
            modifier = Modifier.weight(0.9f),
            maxLines = 3
        )
        IconButton(
            onClick = { /*TODO*/ },
            enabled = true,
        ) {
            Icon(
                imageVector = Icons.Default.Send,
                contentDescription = "Send message"
            )
        }
    }
}

@Composable
private fun ChatTopAppBar() {
    TopAppBar(
        modifier = Modifier.fillMaxWidth(),
        title = {
            Text(
                text = "Chat",
                overflow = TextOverflow.Ellipsis,
                style = MaterialTheme.typography.titleLarge,
                textAlign = TextAlign.Center,
                maxLines = 1
            )
        },
        navigationIcon = {
            IconButton(onClick = { /*TODO*/ }) {
                Icon(
                    imageVector = Icons.Default.ArrowBack,
                    contentDescription = "Arrow back"
                )
            }
        },
        actions = {
            #if(${USE_TOP_APP_BAR_SEARCH_ICON} == true)
            IconButton(onClick = { /*TODO*/ }) {
                Icon(
                    imageVector = Icons.Default.Search,
                    contentDescription = "Search"
                )
            }
            #end
            #if(${USE_TOP_APP_BAR_OPTIONS_MENU_ICON} == true)
            IconButton(onClick = { /*TODO*/ }) {
                Icon(
                    imageVector = Icons.Default.MoreVert,
                    contentDescription = "Options menu"
                )
            }
            #end
        },
        backgroundColor = MaterialTheme.colorScheme.surface,
        contentColor = MaterialTheme.colorScheme.onSurface
    )
}

@Preview(
    name = "Top app bar"
)
@Composable
private fun AppBarPreview() {
    ChatTopAppBar()
}

@Preview(
    showBackground = true,
    name = "Chat message"
)
@Composable
private fun PreviewMessageContent() {

    MessageContent(
        messageText = "Lorem ipsum dolor sit amet",
        senderName = "Lorem Ipsum",
        sendTime = Date(Date().time),
        isLocal = false
    )
}

@Preview(
    showBackground = true,
    name = "Local chat message"
)
@Composable
private fun PreviewLocalMessageContent() {

    MessageContent(
        messageText = "Lorem ipsum dolor sit amet",
        senderName = "Lorem Ipsum",
        sendTime = Date(Date().time),
        isLocal = true
    )
}

@Preview(
    showBackground = true,
    name = "Chat screen"
)
@Composable
private fun ChatScreenPreview() {
    ChatScreen()
}
